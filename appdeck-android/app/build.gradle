/*buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}*/
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    maven {
        url 'https://download.01.org/crosswalk/releases/crosswalk/android/maven2'
        //url 'https://download.01.org/crosswalk/releases/crosswalk/android/canary/'
    }
    maven { url 'https://maven.fabric.io/public' }

    maven { url "https://jitpack.io" }

    //maven { url "https://jitpack.io" }

    flatDir {
        dirs 'libs'
    }

    jcenter()
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

//    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.mobideck.appdeck"

        minSdkVersion 15
        targetSdkVersion 23
        versionCode 67
        versionName "1.6.7"

        // Enabling multidex support.
        multiDexEnabled true
    }

    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    //flavorDimensions "webview", "abi"

    productFlavors {

        crosswalk {
            flavorDimension "webview"
            // 15 by default, set 21 for faster build time
            minSdkVersion 15
            versionCode = 1
        }

        chromium {
            flavorDimension "webview"
            // 19 by default, set 21 for faster build time
            minSdkVersion 19
            versionCode = 2
        }
/*
        chromiumdev {
            minSdkVersion 21
            versionCode = 3
        }*/
    }

    splits {
        abi {
            enable true // enable ABI split feature to create one APK per ABI
            reset()
            include 'x86', 'armeabi-v7a'//, 'mips'
            universalApk true // generate an additional APK that targets all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'mips':5, 'mips64':6, 'x86':8, 'x86_64':9]

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            //println "1Patch version code: " + output.versionCodeOverride + " -> " + project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1 + android.defaultConfig.versionCode * 10
            //println "Patch version code: " + android.defaultConfig.versionCode
            output.versionCodeOverride =
                    android.defaultConfig.versionCode * 10000 + variant.productFlavors.get(0).versionCode * 100 + project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0)
            //println "Patch version code: " + android.defaultConfig.versionCode + " => " + output.versionCodeOverride

        }
    }

    dexOptions {
        //incremental true
        jumboMode true
        javaMaxHeapSize "4g"
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:multidex:1.0.1'
    //compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'

    //compile 'com.google.android.gms:play-services:8.1.0'

    compile 'com.google.android.gms:play-services-analytics:8.4.0'
    compile 'com.google.android.gms:play-services-gcm:8.4.0'
    compile 'com.google.android.gms:play-services-ads:8.4.0'
    //compile 'com.google.android.gms:play-services-appindexing:8.1.0'

    compile 'com.github.chrisbanes.photoview:library:1.2.4'

    compile 'com.loopj.android:android-async-http:1.4.9'

    crosswalkCompile 'org.xwalk:xwalk_core_library:15.44.384.13'

//    crosswalkCompile 'org.xwalk:xwalk_core_library:17.46.443.0'

/*    compile ('org.xwalk:xwalk_core_library:15.44.384.13') {
        exclude group: 'SevenZip'
    }*/
    //crosswalkCompile 'org.xwalk:xwalk_core_library:15.44.384.13'

    compile 'org.slf4j:slf4j-android:1.7.10'


    compile('com.crashlytics.sdk.android:crashlytics:2.2.4@aar') {
        transitive = true;
    }

    compile('com.twitter.sdk.android:twitter:1.11.0@aar') {
        transitive = true
        exclude module: 'gson';
    }

    compile('com.mopub:mopub-sdk:3.13.0@aar') {
        transitive = true
    }

    compile 'com.facebook.android:facebook-android-sdk:4.7.0'
    //compile files('libs/AudienceNetwork.jar')

    compile 'com.github.hotchemi:android-rate:0.5.5'

    compile 'com.widespace:widespace-sdk-4.6.1@aar'

    //compile 'com.github.navasmdc:MaterialDesign:1.5@aar'
    compile 'com.github.vajro:MaterialDesignLibrary:1.6'

    compile 'com.nineoldandroids:library:2.4.0'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'

    compile 'com.jakewharton.timber:timber:4.1.0'

    compile('com.github.afollestad.material-dialogs:core:0.8.5.2@aar') {
        transitive = true
    }

    compile('com.github.afollestad.material-dialogs:commons:0.8.5.2@aar') {
        transitive = true
    }


}

preBuild.doFirst {
    // Download embed assets
    println "php extra/embedresources_android_studio.php build".execute(null, new File(".")).text
}

clean.doFirst {
    println "php extra/embedresources_android_studio.php clean".execute(null, new File(".")).text
}
