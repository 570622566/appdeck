buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven {
        url 'https://download.01.org/crosswalk/releases/crosswalk/android/maven2'
        //url 'https://download.01.org/crosswalk/releases/crosswalk/android/canary/'
    }
    maven { url 'https://maven.fabric.io/public' }

    flatDir {
        dirs 'libs'
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.mobideck.appdeck"
        minSdkVersion 15
        targetSdkVersion 21
        versionCode 42
        versionName "1.42"

        // Enabling multidex support.
        //multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    //flavorDimensions "webview", "abi"

    productFlavors {

        crosswalk {
            flavorDimension "webview"
            minSdkVersion 15
            versionCode = 1
        }

        chromium {
            flavorDimension "webview"
            minSdkVersion 19
            versionCode = 2
        }
    }

    splits {
        abi {
            enable true // enable ABI split feature to create one APK per ABI
            reset()
            include 'x86', 'armeabi-v7a'//, 'mips'
            universalApk true // generate an additional APK that targets all the ABIs
        }
    }

    // map for the version code
    project.ext.versionCodes = ['armeabi':1, 'armeabi-v7a':2, 'arm64-v8a':3, 'mips':5, 'mips64':6, 'x86':8, 'x86_64':9]

    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            //println "1Patch version code: " + output.versionCodeOverride + " -> " + project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 1 + android.defaultConfig.versionCode * 10
            //println "Patch version code: " + android.defaultConfig.versionCode
            output.versionCodeOverride =
                    android.defaultConfig.versionCode * 10000 + variant.productFlavors.get(0).versionCode * 100 + project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0)
            //println "Patch version code: " + android.defaultConfig.versionCode + " => " + output.versionCodeOverride

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:appcompat-v7:22.2.0'
    //compile 'com.google.android.gms:play-services:6.5.87'
    //compile 'com.google.android.gms:play-services-base:6.5.87'

    //compile 'com.google.android.gms:play-services-base:7.0.0'
    compile 'com.google.android.gms:play-services-analytics:7.5.0'
    compile 'com.google.android.gms:play-services-gcm:7.5.0'

    //compile 'com.google.android.gms:play-services-ads:7.5.0'

    //compile 'com.android.support:multidex:1.0.0'

    //compile 'org.xwalk:xwalk_core_library:10.39.235.16'
    //crosswalkCompile 'org.xwalk:xwalk_core_library_beta:11.40.277.7'
    //crosswalkCompile 'org.xwalk:xwalk_core_library:12.41.296.5'
    crosswalkCompile 'org.xwalk:xwalk_core_library:13.42.319.11'
    //crosswalkx86Compile 'org.xwalk:xwalk_core_library_beta:11.40.277.7'


    //compile 'com.github.castorflex.smoothprogressbar:library:1.0.0'
    //compile 'com.github.navasmdc:MaterialDesign:1.+@aar'


    compile 'org.slf4j:slf4j-android:1.7.10'
    //compile 'com.widespace:widespace-sdk-4.6.0-e10401f@aar'

//    compile 'com.github.chrisbanes.photoview:library:1.2.3'
    compile('com.crashlytics.sdk.android:crashlytics:2.2.4@aar') {
        transitive = true;
    }
}

preBuild.doFirst {
    // Download embed assets
    println "php extra/embedresources_android_studio.php build".execute(null, new File(".")).text
}

clean.doFirst {
    println "php extra/embedresources_android_studio.php clean".execute(null, new File(".")).text
}
